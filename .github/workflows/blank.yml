# This is a basic workflow to help you get started with Actions

name: G2A

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  GH2A:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #if: ${{ contains(github.event.commits.*.message,'Merge') }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
     - name: GitHub context
       env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
       run: echo "$GITHUB_CONTEXT"
     - uses: octokit/request-action@v2.x
       id: get_commit
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
       with:
          route: GET /repos/${{ github.repository }}/commits/${{ github.event.head_commit.id  }} 
     - id: get-pullid
       env: 
          reqCommitData: ${{ fromJson(steps.get_commit.outputs.data).commit.message }} 
          reqFileData: ${{ fromJson(steps.get_commit.outputs.data).files[0].filename }} 
       uses: actions/github-script@0.9.0
       with:
        script: |
          const { reqCommitData,reqFileData } = process.env
          const pullid = reqCommitData.substring(reqCommitData.indexOf('#')+1,reqCommitData.indexOf(' from'))
          const deleteName = reqCommitData.substring(reqCommitData.indexOf('/')+1,reqCommitData.indexOf(' '))
          const deleteType = reqCommitData.substring(reqCommitData.indexOf(' ')+1,reqCommitData.indexOf('/'))
          const folderName = reqFileData[0].filename.substring(reqFileData[0].filename.lastIndexOf('/'))
          core.setOutput('itemId', (reqCommitData.indexOf('Delete') > -1?(deleteType + deleteName):folderName))
          core.setOutput('pullid', pullid)  
     - name: get Data
       uses: fjogeleit/http-request-action@master
       id: get_atable
       with:
        url: ${{ format('{0}{1}{2}''{3}''', secrets.APIURL,secrets.APIKEY,'&$filter=Name eq ',steps.get-pullid.outputs.itemId) }}
        method: 'GET'
     - run: echo "${{ steps.get_atable.outputs.response }}"
     - uses: octokit/request-action@v2.x
       id: get_pull
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
       with:
          route: GET /repos/${{ github.repository }}/pulls/${{ steps.get-pullid.outputs.pullid  }} 
     - if:  ${{ contains(join(fromJson(steps.get_commit.outputs.data).files.*.filename,','),'screenshot.png') }}
       uses: octokit/request-action@v2.x
       id: get_image
       with:
          route: GET /repos/${{ github.repository }}/contents/${{ contains(fromJson(steps.get_commit.outputs.data).files[1].filename,'screenshot.png') && fromJson(steps.get_commit.outputs.data).files[1].filename || contains(fromJson(steps.get_commit.outputs.data).files[2].filename,'screenshot.png') && fromJson(steps.get_commit.outputs.data).files[2].filename || fromJson(steps.get_commit.outputs.data).files[0].filename }}
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     
     - run: echo "${{ steps.get_image.outputs.data }}"
     - if:  ${{ contains(join(fromJson(steps.get_commit.outputs.data).files.*.filename,','),'.json') }}
       uses: octokit/request-action@v2.x
       id: get_json
       with:
          route: GET /repos/${{ github.repository }}/contents/${{ contains(fromJson(steps.get_commit.outputs.data).files[1].filename,'.json') && fromJson(steps.get_commit.outputs.data).files[1].filename || contains(fromJson(steps.get_commit.outputs.data).files[2].filename,'.json') && fromJson(steps.get_commit.outputs.data).files[2].filename || fromJson(steps.get_commit.outputs.data).files[0].filename }}
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     
     - run: echo "${{ steps.get_json.outputs.data }}"
     - name: set json data
       id: setjsondata
       run: |          
          content='{"Description":"${{fromJson(steps.get_pull.outputs.data).body}}","Element": "${{ fromJson(steps.get_pull.outputs.data).body }}","FormatType": "${{ contains(fromJson(steps.get_image.outputs.data).path,'Element') && 'View,Column,Form' || contains(fromJson(steps.get_image.outputs.data).path,'View') && 'View' || contains(fromJson(steps.get_image.outputs.data).path,'Column') && 'Column' || 'Form' }}","Name": "${{fromJson(steps.get_json.outputs.data).name}}","TemplateType": "Community","Type": "Template","URL": "https://github.com/${{fromJson(steps.get_pull.outputs.data).user.login}}","PartitionKey":"${{ github.event.head_commit.id  }}","RowKey":"${{ github.event.head_commit.id  }}","Image":"${{ fromJson(steps.get_image.outputs.data).download_url }}","JSON":"${{ fromJson(steps.get_json.outputs.data).content }}"}'
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=dataJson::$content"     
     - name: post Data
       uses: fjogeleit/http-request-action@master
       id: set_atable
       with:
        url: ${{ fromJson(steps.get_atable.outputs.response).value[0] && format('{0}({1}''{2}'',{3}''{4}''){5}', secrets.APIURL, 'PartitionKey=',fromJson(steps.get_atable.outputs.response).value[0].PartitionKey,'RowKey=',fromJson(steps.get_atable.outputs.response).value[0].RowKey,secrets.APIKEY) || format('{0}{1}', secrets.APIURL,secrets.APIKEY) }}
        method: ${{ fromJson(steps.get_atable.outputs.response).value[0] && 'PATCH' || 'POST' }}
        data: ${{ steps.setjsondata.outputs.dataJson }}
     - run: echo "${{ steps.get_atable.outputs.response  }}"
